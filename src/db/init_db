Drop database if exists spsr_lt_db;
Create database spsr_lt_db;

create table Shops
(
	ID serial primary key,
	Name text not null,
	Description text not null
);

create table SaleReceipts
(
	ID serial primary key,
	FIO text not null,
	ShopID integer not null,
	DateOfPurchase date not null,
	SummaryCost integer not null,
	foreign key (ShopID) references Shops(ID)
);

create table Products
(
	ID serial primary key,
	Name text not null,
	ProductType text not null
);

create table Availability
(
	ID serial primary key,
	ShopID integer not null,
	ProductID integer not null,
	foreign key (ShopID) references Shops(ID),
	foreign key (ProductID) references Products(ID)
);

create table SaleReceiptPositions
(
	ID serial primary key,
	AvailabilityID integer not null,
	SaleReceiptID integer not null,
	foreign key (AvailabilityID) references Availability(ID),
	foreign key (SaleReceiptID) references SaleReceipts(ID)
);

create table CostStory
(
	ID serial primary key,
	Year integer not null,
	Month integer not null,
	Cost integer not null,
	AvailabilityID integer not null,
	foreign key (AvailabilityID) references Availability(ID)
);

-- Триггерная функция, которая удаляет значение цены товара в магазине если она старше новой на более 18 месяцев
create or replace function remove_too_old_coststory()
returns trigger
as $$
declare
	old_date_id integer;
	old_date date;
	new_date_id integer;
	new_date date;
	months_diff integer;
begin
-- Самое старое значение цены товара
	select min(date(prod_coststory.Year, prod_coststory.Month)) into old_date
	from (select * 
		  from CostStory 
		  where AvailabilityID = NEW.AvailabilityID) as prod_coststory;
	select prod_coststory.id into old_date_id
	from (select * 
		  from CostStory 
		  where AvailabilityID = NEW.AvailabilityID) as prod_coststory
	where date(prod_coststory.Year, prod_coststory.Month) = old_date;

-- Самое новое значение цены товара
	select max(date(prod_coststory.Year, prod_coststory.Month)) into new_date
	from (select * 
		  from CostStory 
		  where AvailabilityID = NEW.AvailabilityID) as prod_coststory;
	select prod_coststory.id into new_date_id
	from (select * 
		  from CostStory 
		  where AvailabilityID = NEW.AvailabilityID) as prod_coststory
	where date(prod_coststory.Year, prod_coststory.Month) = new_date;
	
	select (date_part('year', new_date) - date_part('year', old_date)) * 12 + (date_part('month', new_date) - date_part('month', old_date))
	into months_diff;
	
	if months_diff > 18 then
		delete from CostStory where AvailabilityID = NEW.AvailabilityID and ID = old_date_id;
	end if;
end
$$ language plpgsql;

create trigger update_coststory after insert on CostStory
	execute function remove_too_old_coststory();
	
create user "user";
create user "analyst" password 'analyst';
create user "admin" password 'admin';

drop user "user";
drop user "analyst";
drop user "admin";